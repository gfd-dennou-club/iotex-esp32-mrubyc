# coding: utf-8

def getCO2ppm(i2c)
  i2c.write(0x31, 0x52)
  sleep(0.1)
  buf = i2c.read_integer(0x31, 7)
  sleep(0.1)
  return (buf[1] << 8) | buf[2]
end

sleep 30

#閾値
level = 1500
#level = 400

#ホスト名
hostname = "s300l"
url = "http://xxxx.epi.it.matsue-ct.jp/iotex2/monitoring2.php"

#監視時刻
mon_hour_begin = 9   
mon_hour_end   = 17

#WIFI 設定
WiFi.init()
# WiFi.setup_ent_peap("id", "ssid", "username", "password")
WiFi.setup_psk("SSID", "PASSWD")
WiFi.start()

sleep 3

# 時刻取得
SNTP.init()
sleep 3

#I2C 初期化
i2c = I2C.new(22, 21, port = 0, freq = 100000)

# LCD 初期化
lcd = AQM0802A.new(i2c)
lcd.setup

# RTC 初期化. 時刻設定
rtc = RC8035SA.new(i2c)

#BCDコードへ変換. 
year = ((SNTP.year - 2000) / 10).to_i(2) << 4 | ((SNTP.year - 2000) % 10).to_i(2)
mon  = (SNTP.mon  / 10).to_i(2) << 4 | (SNTP.mon  % 10).to_i(2)
mday = (SNTP.mday / 10).to_i(2) << 4 | (SNTP.mday % 10).to_i(2)
hour = (SNTP.hour / 10).to_i(2) << 4 | (SNTP.hour % 10).to_i(2)
min  = (SNTP.min  / 10).to_i(2) << 4 | (SNTP.min  % 10).to_i(2)
sec  = (SNTP.sec  / 10).to_i(2) << 4 | (SNTP.sec  % 10).to_i(2)

# RTCに時刻を与える.
rtc.write([0x20, 0x03, 0x31, 1, 0x23, 0x59, 0x50]) #年(下2桁), 月, 日, 曜日, 時, 分, 秒
rtc.write([year, mon, mday, SNTP.wday, hour, min, sec]) #年(下2桁), 月, 日, 曜日, 時, 分, 秒
sleep(3)

#配列初期化
count = 0
sum_eco2 = 0.0
eCO2 = 0.0
sec0 = 0

while true

  #初期化
  sec0 = sec
 
  # 1 秒間隔でサンプリングするために待ち時間を置く
  sleep 0.85

  # CO2 計測
  eCO2 = getCO2ppm(i2c)

  # カウントアップ
  sum_eco2 += eCO2
  count += 1

  #時刻
  tt = rtc.read
  time0 = sprintf("20%02x-%02x-%02xT%02x:%02x:%02x", tt[0], tt[1], tt[2], tt[4], tt[5], tt[6])
  hour = sprintf("%02x",tt[4]).to_i
  sec  = sprintf("%02x",tt[6]).to_i
  
  # 時刻とCO2 表示. 瞬間値を LCD に表示. 
  lcd.cursor(0, 0)
  lcd.write_string(sprintf("%02x:%02x:%02x", tt[4], tt[5], tt[6]))
  lcd.cursor(0, 1)
  lcd.write_string(sprintf("CO2:%04d", eCO2))
  
  #毎ゼロ秒にデータ送信
  if sec < sec0
    
    # 指定の時間帯に閾値を超えた場合にグローバル変数をセットする
    if sum_eco2 / count > level && mon_hour_begin <= hour && hour <= mon_hour_end
      $dur   += 1
      $status = "NG"
    else
      $dur    = 0
      $status = "OK"
    end

    # 確認表示
    p "*****"
    p time0
    p sum_eco2 / count
    p "*****"

    # データ送信
    HTTPClient.init("#{url}?eco2=#{sum_eco2 / count}&hostname=#{hostname}&time=#{time0}&lux=#{$ope}")
    HTTPClient.invoke()
    HTTPClient.cleanup()

    #初期化
    sum_eco2 = 0.0
    count = 0
  end
end
