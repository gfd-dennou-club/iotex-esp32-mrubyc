# coding: utf-8
sleep 30

#閾値
level = 1500
#level = 400

#ホスト名
hostname = "itoc02"
url = "http://xxx.epi.it.matsue-ct.jp/iotex2/monitoring2.php"

#監視時刻
mon_hour_begin = 9   
mon_hour_end   = 17

#WIFI 設定
WiFi.init()
# WiFi.setup_ent_peap("id", "ssid", "username", "password")
WiFi.setup_psk("ssid", "passwd")
WiFi.start()

sleep 3

# 時刻取得
SNTP.init()
sleep 3

# A/D 変換 初期化
adc = ADC.new( 39, ADC::ATTEN_11DB, ADC::WIDTH_12BIT ) 
 
#温度計測用変数初期化
B = 3435.0
To = 25.0
V = 3300.0
Rref = 10.0

sleep 3

#I2C 初期化
i2c = I2C.new(22, 21)

# LCD 初期化
lcd = AQM0802A.new(i2c)
lcd.setup

# RTC 初期化. 時刻設定
rtc = RC8035SA.new(i2c)

#BCDコードへ変換. 
year = ((SNTP.year - 2000) / 10).to_i(2) << 4 | ((SNTP.year - 2000) % 10).to_i(2)
mon  = (SNTP.mon  / 10).to_i(2) << 4 | (SNTP.mon  % 10).to_i(2)
mday = (SNTP.mday / 10).to_i(2) << 4 | (SNTP.mday % 10).to_i(2)
hour = (SNTP.hour / 10).to_i(2) << 4 | (SNTP.hour % 10).to_i(2)
min  = (SNTP.min  / 10).to_i(2) << 4 | (SNTP.min  % 10).to_i(2)
sec  = (SNTP.sec  / 10).to_i(2) << 4 | (SNTP.sec  % 10).to_i(2)

# RTCに時刻を与える.
rtc.write([0x20, 0x03, 0x31, 1, 0x23, 0x59, 0x50]) #年(下2桁), 月, 日, 曜日, 時, 分, 秒
rtc.write([year, mon, mday, SNTP.wday, hour, min, sec]) #年(下2桁), 月, 日, 曜日, 時, 分, 秒
sleep(3)

#SGP30 初期化
sgp = SGP30.new(i2c)
serialnumber = sgp.begin()
if !serialnumber then
  p "Sensor not found :("
  while true
  end
end

print "Found SGP30 serial #"
print serialnumber[0].to_s(16)
print serialnumber[1].to_s(16)
puts  serialnumber[2].to_s(16)

#配列初期化
count = 0
sum_temp = 0.0
sum_eco2 = 0.0

while true

  # 温度計測
  voltage = adc.read()
  temp = 1.0 / ( 1.0 / B * Math.log( (V - voltage) / (voltage/ Rref) / Rref) + 1.0 / (To + 273.0) ) - 273.0
#  puts "#{voltage} mV, #{temp} K"
  
  reply = sgp.IAQmeasure()
  if !reply then
    p "Measurement failed"
    return
  end
  tvoc = reply[1]
  eCO2 = reply[0]
#  puts #改行
#  print "TVOC #{tvoc} ppb\t"
#  puts "eCO2 #{eCO2} ppm"
  
  reply = sgp.IAQmeasureRaw()
  if !reply then
    p "Measurement failed"
    return
  end
  rawEthanol = reply[1]
  rawH2 = reply[0]
#  print "Raw H2 #{rawH2} \t"
#  puts "Raw Ethanol #{rawEthanol}"

  #時刻
  tt = rtc.read
  time0 = sprintf("20%02x-%02x-%02xT%02x:%02x:%02x", tt[0], tt[1], tt[2], tt[4], tt[5], tt[6])
  hour = sprintf("%02x",tt[4]).to_i
  sec  = sprintf("%02x",tt[6]).to_i
#  p time0, hour, sec
  
  # 時刻とCO2 表示. 瞬間値を LCD に表示. 
  lcd.cursor(0, 0)
  lcd.write_string(sprintf("%02x:%02x:%02x", tt[4], tt[5], tt[6]))
  lcd.cursor(0, 1)
  lcd.write_string(sprintf("CO2:%04d", eCO2))

  # カウントアップ
  sum_temp += temp
  sum_eco2 += eCO2
  count += 1

  #SGP30 は 1 秒間隔でサンプリングするために待ち時間を置く
  sleep 0.85
  
  #毎ゼロ秒にデータ送信
  if sec == 0
    
    # 指定の時間帯に閾値を超えた場合にグローバル変数をセットする
    if sum_eco2 / count > level && mon_hour_begin <= hour && hour <= mon_hour_end
      $dur   += 1
      $status = "NG"
    else
      $dur    = 0
      $status = "OK"
    end

    # 確認表示
    p "*****"
    p time0
    p sum_temp / count
    p sum_eco2 / count
    p "*****"

    # データ送信
    HTTPClient.init("#{url}?temp=#{sum_temp / count}&eco2=#{sum_eco2 / count}&hostname=#{hostname}&time=#{time0}&lux=#{$ope}")
    HTTPClient.invoke()
    HTTPClient.cleanup()

    #初期化
    sum_temp = 0.0
    sum_eco2 = 0.0
    count = 0
  end
end
  
=begin  
  counter += 1

  if (counter == 30) then
    counter = 0

    reply = sgp.getIAQBaseline()
    if !reply then
      puts "Faile to get baseline readings"
      return
    end
    eco2_base = reply[0]
    tvoc_base = reply[1]
    print "****Baseline values: eCO2: 0x"
    print eco2_base.to_s(16)
    print " & TVOC: 0x"
    puts  tvoc_base.to_s(16)
  end
=end
